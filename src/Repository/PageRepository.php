<?php

namespace App\Repository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Symfony\Component\HttpFoundation\Request;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends \Doctrine\ORM\EntityRepository
{
    public function pagesPublieesQB(){
        return $this
            ->createQueryBuilder('p')
                ->where('p.corbeille = 0')
                ->andWhere('p.active = 1')
                //->andWhere('p.langue = :langue')
                //->setParameter('langue', $langue)
                ->orderBy('p.datePublication', 'DESC');
    }

    public function pagesPubliees($langue, $limite = null, $offset = null){
        $timestamp = new \DateTime();
        $date = $timestamp->format('Y-m-d H:i:s');

        $qb = $this
            ->createQueryBuilder('p')
                ->where('p.corbeille = 0')
                ->andWhere('p.active = 1')
                ->andWhere('p.langue = :langue')
                ->andWhere('p.datePublication < :date')
                ->andWhere('p.dateDepublication > :date OR p.dateDepublication IS NULL')
                    ->setParameters(array('langue' => $langue, 'date' => $date))
            ->orderBy('p.datePublication', 'DESC');

        if($limite){
            $qb->setMaxResults($limite);
        }

        if($offset){
            $qb->setFirstResult($offset);
        }

        return $qb->getQuery()->getResult();
    }

    public function pagesPublieesCategorie($categorie, $langue, $limite = null, $offset = null){
        $timestamp = new \DateTime();
        $date = $timestamp->format('Y-m-d H:i:s');

        $qb = $this
            ->createQueryBuilder('p')
                ->where('p.corbeille = 0')
                ->andWhere('p.active = 1')
                ->andWhere('p.langue = :langue')
                ->andWhere('p.datePublication < :date')
                ->andWhere(':categorie MEMBER OF p.categories')
                ->andWhere('p.dateDepublication > :date OR p.dateDepublication IS NULL')
                    ->setParameters(array('langue' => $langue, 'date' => $date, 'categorie' => $categorie))
            ->orderBy('p.datePublication', 'DESC');

        if($limite){
            $qb->setMaxResults($limite);
        }

        if($offset){
            $qb->setFirstResult($offset);
        }

        return $qb->getQuery()->getResult();
    }

    public function nombrePagesPublieesCategorie($categorie, $langue, $limite = null){
        $timestamp = new \DateTime();
        $date = $timestamp->format('Y-m-d H:i:s');

        $qb = $this
            ->createQueryBuilder('p')
                ->select('count(p.id)')
                ->where('p.corbeille = 0')
                ->andWhere('p.active = 1')
                ->andWhere('p.langue = :langue')
                ->andWhere('p.datePublication < :date')
                ->andWhere(':categorie MEMBER OF p.categories')
                ->andWhere('p.dateDepublication > :date OR p.dateDepublication IS NULL')
                    ->setParameters(array('langue' => $langue, 'date' => $date, 'categorie' => $categorie))
            ->orderBy('p.datePublication', 'DESC');

        $nbResultats = $qb->getQuery()->getSingleScalarResult();

        if($limite && $limite < $nbResultats){
            return $limite;
        }else{
            return $nbResultats;
        }
    }

    public function nombreTotal(){
        $qb = $this
            ->createQueryBuilder('p')
            ->select('count(p.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function nombrePagesPubliees($langue = null, $limite = null){
        $timestamp = new \DateTime();
        $date = $timestamp->format('Y-m-d H:i:s');

        $qb = $this
            ->createQueryBuilder('p')
            ->select('count(p.id)')
            ->where('p.corbeille = 0')
            ->andWhere('p.active = 1')
            ->andWhere('p.datePublication < :date')
            ->andWhere('p.dateDepublication > :date OR p.dateDepublication IS NULL');

        if($langue){
            $qb->andWhere('p.langue = :langue')
                ->setParameters(array('langue' => $langue, 'date' => $date));
        }else{
            $qb->setParameters(array('date' => $date));
        }

        $nbResultats = $qb->getQuery()->getSingleScalarResult();

        if($limite && $limite < $nbResultats){
            return $limite;
        }else{
            return $nbResultats;
        }
    }

    public function titreMenuLike($langue, $recherche){
        $qb = $this
            ->createQueryBuilder('p')
            ->where('p.langue = :langue')
            ->andwhere('p.titreMenu LIKE :recherche')
            ->setParameters(array('langue' => $langue, 'recherche' => '%'.$recherche.'%'));

        return $qb->getQuery()->getResult();
    }
}
